{
    "env": {
        "es6": true // enable all ECMAScript 6 features except for modules (this automatically sets the ecmaVersion parser option to 6).
    },
    "parserOptions": {
        "ecmaVersion": 2017,
        "sourceType": "module",
        "ecmaFeatures": {
            "binaryLiterals": true,                     // enable binary literals
            "blockBindings": true,                      // enable let and const (aka block bindings)
            "defaultParams": true,                      // enable default function parameters
            "forOf": true,                              // enable for-of loops
            "generators": true,                         // enable generators
            "objectLiteralComputedProperties": true,    // enable computed object literal property names
            "objectLiteralDuplicateProperties": true,   // enable duplicate object literal properties in strict mode
            "objectLiteralShorthandMethods": true,      // enable object literal shorthand methods
            "objectLiteralShorthandProperties": true,   // enable object literal shorthand properties
            "octalLiterals": true,                      // enable octal literals
            "regexUFlag": true,                         // enable the regular expression u flag
            "regexYFlag": true,                         // enable the regular expression y flag
            "templateStrings": true,                    // enable template strings
            "unicodeCodePointEscapes": true,            // enable code point escapes
            "jsx": false,                                // enable JSX
            "experimentalObjectRestSpread": true        // enable object spread
        }
    },
    "rules": {
        ////////// Possible Errors //////////
        "comma-dangle": 2,                // disallow trailing commas in object literals
        "no-cond-assign": 2,              // disallow assignment in conditional expressions
        "no-console": 1,                  // disallow use of console (off by default in the node environment)
        "no-constant-condition": 2,       // disallow use of constant expressions in conditions
        "no-control-regex": 0,            // disallow control characters in regular expressions
        "no-debugger": 1,                 // disallow use of debugger
        "no-dupe-keys": 2,                // disallow duplicate keys when creating object literals
        "no-empty": 2,                    // disallow empty statements
        "no-empty-class": 0,              // disallow the use of empty character classes in regular expressions
        "no-ex-assign": 0,                // disallow assigning to the exception in a catch block
        "no-extra-boolean-cast": 2,       // disallow double-negation boolean casts in a boolean context
        "no-extra-parens": 2,             // disallow unnecessary parentheses (off by default)
        "no-extra-semi": 2,               // disallow unnecessary semicolons
        "no-func-assign": 2,              // disallow overwriting functions written as function declarations
        "no-inner-declarations": 2,       // disallow function or variable declarations in nested blocks
        "no-invalid-regexp": 2,           // disallow invalid regular expression strings in the RegExp constructor
        "no-irregular-whitespace": 1,     // disallow irregular whitespace outside of strings and comments
        "no-negated-in-lhs": 2,           // disallow negation of the left operand of an in expression
        "no-obj-calls": 2,                // disallow the use of object properties of the global object ( Math and JSON) as functions
        "no-regex-spaces": 2,             // disallow multiple spaces in a regular expression literal
        "no-sparse-arrays": 2,            // disallow sparse arrays
        "no-unreachable": 2,              // disallow unreachable statements after a return, throw, continue, or break statement
        "use-isnan": 2,                   // disallow comparisons with the value NaN
        "valid-jsdoc": 2,                 // Ensure JSDoc comments are valid (off by default)
        "valid-typeof": 2,                // Ensure that the results of typeof are compared against a valid string

        ////////// Best Practices //////////
        "block-scoped-var": 2,            // treat var statements as if they were block scoped (off by default)
        "complexity": 0,                  // specify the maximum cyclomatic complexity allowed in a program (off by default)
        "consistent-return": 1,           // require return statements to either always or never specify values
        "curly": 2,                       // specify curly brace conventions for all control statements
        "default-case": 2,                // require default case in switch statements (off by default)
        "dot-notation": 2,                // encourages use of dot notation whenever possible
        "eqeqeq": 1,                      // require the use of === and !==
        "guard-for-in": 1,                // make sure for-in loops have an if statement (off by default)
        "no-alert": 1,                    // disallow the use of alert, confirm, and prompt
        "no-caller": 2,                   // disallow use of arguments.caller or arguments.callee
        "no-div-regex": 0,                // disallow division operators explicitly at beginning of regular expression (off by default)
        "no-else-return": 2,              // disallow else after a return in an if (off by default)
        "no-empty-label": 0,              // disallow use of labels for anything other then loops and switches
        "no-eq-null": 1,                  // disallow comparisons to null without a type-checking operator (off by default)
        "no-eval": 2,                     // disallow use of eval()
        "no-extend-native": 2,            // disallow adding to native types
        "no-extra-bind": 2,               // disallow unnecessary function binding
        "no-fallthrough": 2,              // disallow fallthrough of case statements
        "no-floating-decimal": 2,         // disallow the use of leading or trailing decimal points in numeric literals (off by default)
        "no-implied-eval": 2,             // disallow use of eval()-like methods
        "no-iterator": 2,                 // disallow usage of __iterator__ property
        "no-labels": 2,                   // disallow use of labeled statements
        "no-lone-blocks": 1,              // disallow unnecessary nested blocks
        "no-loop-func": 2,                // disallow creation of functions within loops
        "no-multi-spaces": 1,             // disallow use of multiple spaces
        "no-multi-str": 1,                // disallow use of multiline strings
        "no-native-reassign": 2,          // disallow reassignments of native objects
        "no-new": 1,                      // disallow use of new operator when not part of the assignment or comparison
        "no-new-func": 2,                 // disallow use of new operator for Function object
        "no-new-wrappers": 2,             // disallows creating new instances of String, Number, and Boolean
        "no-octal": 0,                    // disallow use of octal literals
        "no-octal-escape": 0,             // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-process-env": 0,              // disallow use of process.env (off by default)
        "no-proto": 0,                    // disallow usage of __proto__ property
        "no-redeclare": 0,                // disallow declaring the same variable more then once
        "no-return-assign": 2,            // disallow use of assignment in return statement
        "no-script-url": 2,               // disallow use of javascript: urls.
        "no-self-compare": 2,             // disallow comparisons where both sides are exactly the same (off by default)
        "no-sequences": 0,                // disallow use of comma operator
        "no-unused-expressions": 0,       // disallow usage of expressions in statement position
        "no-void": 0,                     // disallow use of void operator (off by default)
        "no-warning-comments": 1,         // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
        "no-with": 0,                     // disallow use of the with statement
        "radix": 1,                       // require use of the second argument for parseInt() (off by default)
        "vars-on-top": 1,                 // requires to declare all vars on top of their containing scope (off by default)
        "wrap-iife": 1,                   // require immediate function invocation to be wrapped in parentheses (off by default)
        "yoda": 1,                        // require or disallow Yoda conditions

        ////////// Strict Mode //////////
        "strict": 0,                        // controls location of Use Strict Directives

        ////////// Variables //////////
        "no-catch-shadow": 0,               // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
        "no-shadow": 0,                     // disallow declaration of variables already declared in the outer scope
        "no-shadow-restricted-names": 0,    // disallow shadowing of names such as arguments
        "no-undef": 0,                      // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef-init": 0,                 // disallow use of undefined when initializing variables
        "no-undefined": 0,                  // disallow use of undefined variable (off by default)
        "no-unused-vars": 2,                // disallow declaration of variables that are not used in the code
        "no-use-before-define": 0,          // disallow use of variables before they are defined

        ////////// Stylistic Issues //////////
        "brace-style": 2,                   // enforce one true brace style (off by default)
        "camelcase": 2,                     // require camel case names
        "comma-spacing": 0,                 // enforce spacing before and after comma
        "comma-style": [2, "last"],         // enforce one true comma style (off by default)
        "consistent-this": 1,               // enforces consistent naming when capturing the current execution context (off by default)
        "eol-last": 0,                      // enforce newline at the end of file, with no multiple empty lines
        "func-names": 0,                    // require function expressions to have a name (off by default)
        "func-style": 0,                    // enforces use of function declarations or expressions (off by default)
        "key-spacing": 2,                   // enforces spacing between keys and values in object literal properties
        "max-nested-callbacks": 0,          // specify the maximum depth callbacks can be nested (off by default)
        "new-cap": 0,                       // require a capital letter for constructors
        "new-parens": 0,                    // disallow the omission of parentheses when invoking a constructor with no arguments
        "no-array-constructor": 0,          // disallow use of the Array constructor
        "no-inline-comments": 1,            // disallow comments inline after code (off by default)
        "no-lonely-if": 1,                  // disallow if as the only statement in an else block (off by default)
        "no-mixed-spaces-and-tabs": 1,      // disallow mixed spaces and tabs for indentation
        "no-multiple-empty-lines": 0,       // disallow multiple empty lines (off by default)
        "no-nested-ternary": 1,             // disallow nested ternary expressions (off by default)
        "no-new-object": 2,                 // disallow use of the Object constructor
        "semi-spacing": 2,                  // disallow space before semicolon
        "no-spaced-func": 2,                // disallow space between function identifier and application
        "no-ternary": 0,                    // disallow the use of ternary operators (off by default)
        "no-trailing-spaces": 1,            // disallow trailing whitespace at the end of lines
        "no-underscore-dangle": 2,          // disallow dangling underscores in identifiers
        "no-wrap-func": 0,                  // disallow wrapping of non-IIFE statements in parens
        "one-var": [1, "never"],            // allow just one var statement per function (off by default)
        "operator-assignment": 0,           // require assignment operator shorthand where possible or prohibit it entirely (off by default)
        "padded-blocks": 0,                 // enforce padding within blocks (off by default)
        "quote-props": 0,                   // require quotes around object literal property names (off by default)
        "quotes": [2, "single"],            // specify whether double or single quotes should be used
        "semi": 2,                          // require or disallow use of semicolons instead of ASI
        "sort-vars": 0,                     // sort variables within the same declaration block (off by default)
        "space-before-function-paren": [2, "never"], // require a space after function names (off by default)
        "keyword-spacing": 2,               // require a space after certain keywords (off by default)
        "space-before-blocks": 2,           // require or disallow space before blocks (off by default)
        "object-curly-spacing": 2,          // require or disallow spaces inside brackets (off by default)
        "array-bracket-spacing": 2,
        "computed-property-spacing": 2,
        "space-in-parens": 2,               // require or disallow spaces inside parentheses (off by default)
        "space-infix-ops": 2,               // require spaces around operators
        "space-unary-ops": 2,               // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
        "spaced-comment": 1,                // require or disallow a space immediately following the // in a line comment (off by default)
        "wrap-regex": 2,                    // require regex literals to be wrapped in parentheses (off by default)

        ////////// ECMAScript 6 //////////
        "no-var": 2,                            // require let or const instead of var (off by default)
        "generator-star-spacing": ["error", {"before": true, "after": false}],        // enforce the position of the * in generator functions (off by default)
        "arrow-body-style": 1,                  // enforces no braces where they can be omitted
        "arrow-parens": 0,                      // require parens in arrow function arguments
        "arrow-spacing": [2, {"before": true, "after": true}], // require space before/after arrow function's arrow
        "constructor-super": 0,                 // verify super() callings in constructors
        "no-class-assign": 0,                   // disallow modifying variables of class declarations
        "no-confusing-arrow": 0,                // disallow arrow functions where they could be confused with comparisons
        "no-const-assign": 2,                    // disallow modifying variables that are declared using const
        "no-dupe-class-members": 0,             // disallow duplicate class members
        "no-duplicate-imports": 2,              // disallow importing from the same path more than once
        "no-new-symbol": 0,                     // disallow symbol constructor
        "no-useless-computed-key": 2,           // disallow useless computed property keys
        "no-useless-constructor": 2,            // disallow unnecessary constructor http://eslint.org/docs/rules/no-useless-constructor
        "no-useless-rename": [2, {"ignoreDestructuring": false, "ignoreImport": false, "ignoreExport": false}], // disallow renaming import, export, and destructured assignments to the same name http://eslint.org/docs/rules/no-useless-rename
        "object-shorthand": 0,                  // require method and property shorthand syntax for object literals http://eslint.org/docs/rules/object-shorthand
        "prefer-arrow-callback": 0,             // suggest using arrow functions as callbacks
        "prefer-const": 2,                      // suggest using of const declaration for variables that are never modified after declared
        "prefer-destructuring": 1,              // Prefer destructuring from arrays and objects http://eslint.org/docs/rules/prefer-destructuring,
        "prefer-numeric-literals": 0,           // disallow parseInt() in favor of binary, octal, and hexadecimal literals http://eslint.org/docs/rules/prefer-numeric-literals
        "prefer-rest-params": 1,                // use rest parameters instead of arguments http://eslint.org/docs/rules/prefer-rest-params
        "prefer-spread": 1,                     // suggest using the spread operator instead of .apply() http://eslint.org/docs/rules/prefer-spread
        "prefer-template": 2,                   // suggest using template literals instead of string concatenation http://eslint.org/docs/rules/prefer-template
        "require-yield": 0,                     // disallow generator functions that do not have yield http://eslint.org/docs/rules/require-yield
        "rest-spread-spacing": [2, "never"],    // enforce spacing between object rest-spread http://eslint.org/docs/rules/rest-spread-spacing
        "sort-imports": 0,                      // import sorting http://eslint.org/docs/rules/sort-imports
        "symbol-description": 0,                // require a Symbol description http://eslint.org/docs/rules/symbol-description
        "template-curly-spacing": [2, "never"], // enforce usage of spacing in template strings http://eslint.org/docs/rules/template-curly-spacing
        "yield-star-spacing": [2, {"before": true, "after": true}], // enforce spacing around the * in yield* expressions http://eslint.org/docs/rules/yield-star-spacing
    }
}